<?php

namespace apps\console\commands;

use mix\client\PDOPersistent;
use mix\console\ExitCode;
use mix\facades\Input;
use mix\facades\Output;

/**
 * 单进程范例
 * @author 刘健 <coder.liu@qq.com>
 */
class TelnetCommand extends BaseCommand
{

    // 初始化事件
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 获取程序名称
        $this->programName = Input::getCommandName();
    }

    public function actionMul($x, $y)
    {
        return $x * $y;
    }

    public function actionIncr($x)
    {
        return $x + 1;
    }

    public function actionDiv($x, $y)
    {
        if ($y == 0) {
            return 0;
        }
        return $x / $y;
    }

    public function actionConvTree()
    {
        $jsonStr = '[{"id": 200002538,
            "name": "空心菜类",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,空心菜类"
        },
        {"id": 200002537,
            "name": "香菜类",
            "level": 3,
            "namePath": "蔬菜/豆制品,葱姜蒜椒/调味菜,香菜类"
        },
        {"id": 200002536,
            "name": "紫苏/苏子叶",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,紫苏/苏子叶"
        },
        { "id": 200002543,
            "name": "乌塌菜/塌菜/乌菜",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,乌塌菜/塌菜/乌菜"
        },
        {"id": 200002542,
            "name": "菜心/菜苔类",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,菜心/菜苔类"
        },
        { "id": 200002540,
            "name": "马兰头/马兰/红梗菜",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,马兰头/马兰/红梗菜"
        },
        {"id": 200002531,
            "name": "苋菜类",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,苋菜类"
        },
        {"id": 200002528,
            "name": "其他叶菜类",
            "level": 3,
            "namePath": "蔬菜/豆制品,叶菜类,其他叶菜类"
        }
    ]';
        $data = json_decode($jsonStr, true);
        //"id": "MijvA63l4T",
        //            "id_path": ",jfJVl7Soha,MijvA63l4T,",
        //            "is_leaf": 2,
        //            "level": 2,
        //            "name": "叶菜类",
        //            "name_path": "蔬菜/豆制品,叶菜类",
        //            "parent_id": "jfJVl7Soha",
        //            "children":
        $list = [];
        foreach ($data as $item) {
            $paths = explode(",", $item["namePath"]);
            $firstPath = substr(md5($paths[0]), 0, 10);
            $parentPath = $firstPath;
            $idPath = "";
            if (empty($list[$firstPath])) {
                if ($paths[0] == $item["name"]) {
                    $isLeaf = 1;
                    $idPath = $item["id"];
                    $id = $item["id"];
                } else {
                    $isLeaf = 2;
                    $idPath = $firstPath;
                    $id = $firstPath;
                }
                $list[$firstPath] = [
                    "id" => $id,//随机10位
                    "id_path" => "," . $idPath . ",",
                    "is_leaf" => $isLeaf,
                    "level" => 1,
                    "name" => $paths[0],
                    "name_path" => $paths[0],
                    "parent_id" => "0",
                    "children" => [],
                ];
            }else{
                $idPath = trim($list[$firstPath]["id_path"],",");
            }
            if (count($paths)>=1){
                $secondPath = substr(md5($paths[1]), 0, 10);
                if (empty($list[$firstPath]["children"][$secondPath])) {
                    if ($paths[1] == $item["name"]) {
                        $isLeaf = 1;
                        $idPath .= ",".$item["id"];
                        $id = $item["id"];
                    } else {
                        $isLeaf = 2;
                        $idPath .= ",".$secondPath;
                        $id = $secondPath;
                    }
                    $list[$firstPath]["children"][$secondPath] = [
                        "id" => $id,//随机10位
                        "id_path" => "," . $idPath . ",",
                        "is_leaf" => $isLeaf,
                        "level" => 2,
                        "name" => $paths[1],
                        "name_path" => $paths[0].",".$paths[1],
                        "parent_id" => $parentPath,
                        "children" => [],
                    ];
                }else{
                    $idPath = trim($list[$firstPath]["children"][$secondPath]["id_path"],",");
                }
                $parentPath = $secondPath;
            }
            if (count($paths)>=2){
                        $isLeaf = 1;
                        $idPath .= ",".$item["id"];
                        $id = $item["id"];
                    $list[$firstPath]["children"][$secondPath]["children"][] = [
                        "id" => $id,//随机10位
                        "id_path" => "," . $idPath . ",",
                        "is_leaf" => $isLeaf,
                        "level" => 3,
                        "name" => $paths[2],
                        "name_path" => $paths[0].",".$paths[1].",".$paths[2],
                        "parent_id" => $parentPath,
                        "children" => [],
                    ];
            }
        }
        $arr = [];
        foreach($list as $k=>$item){
            $arr[] = $this->children($item);
        }
        return json_encode($arr,JSON_UNESCAPED_UNICODE);
    }

    private function children($item){
        if(empty($item["children"])){
            return $item;
        }
        $children = [];
        foreach ($item["children"] as $child){
            $children[] = $this->children($child);
        }
        $item["children"] = $children;
        return $item;
    }

}
